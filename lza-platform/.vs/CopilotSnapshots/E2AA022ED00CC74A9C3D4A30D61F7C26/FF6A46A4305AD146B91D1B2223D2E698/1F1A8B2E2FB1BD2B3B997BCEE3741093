# Product Requirements Document - LZA TFM ADO Accelerator Directory Structure

## Document Information

| Field | Value |
|-------|-------|
| **Document Title** | LZA TFM ADO Accelerator Directory Structure |
| **Version** | 1.0 |
| **Date** | 2024 |
| **Author** | GitHub Copilot |
| **Status** | Active |
| **Classification** | Internal |

## Table of Contents

1. [Executive Summary](#executive-summary)
2. [Background](#background)
3. [Problem Statement](#problem-statement)
4. [Solution Overview](#solution-overview)
5. [Requirements](#requirements)
6. [Technical Specifications](#technical-specifications)
7. [Implementation Details](#implementation-details)
8. [User Experience](#user-experience)
9. [Security Considerations](#security-considerations)
10. [Testing and Validation](#testing-and-validation)
11. [Success Metrics](#success-metrics)
12. [Future Enhancements](#future-enhancements)
13. [Appendices](#appendices)

## Executive Summary

This Product Requirements Document (PRD) outlines the requirements and specifications for the **LZA TFM ADO Accelerator Directory Structure** automation solution. The solution provides a PowerShell script that creates a standardized directory structure and configuration files for Azure Landing Zone (ALZ) Terraform deployments in Azure DevOps (ADO) environments.

### Key Objectives

- **Standardization**: Establish a consistent directory structure for Azure Landing Zone Terraform deployments
- **Automation**: Eliminate manual directory and file creation processes
- **Configuration Management**: Provide template configuration files with sensible defaults
- **Developer Experience**: Streamline the setup process for Azure Landing Zone deployments

### Business Value

- Reduces setup time from hours to minutes
- Eliminates configuration errors through standardized templates
- Improves consistency across different deployment environments
- Enables faster onboarding for new Azure Landing Zone implementations

## Background

### Context

Azure Landing Zones (ALZ) are a foundational framework for deploying and managing Azure resources at enterprise scale. The Azure Landing Zone Terraform Accelerator provides Infrastructure as Code (IaC) capabilities for deploying these landing zones using Terraform.

### Current State

Organizations implementing Azure Landing Zones with Terraform currently face challenges:

1. **Manual Setup**: Teams manually create directory structures and configuration files
2. **Configuration Errors**: Inconsistent file formats and missing required parameters
3. **Time Consumption**: Significant time spent on boilerplate setup tasks
4. **Documentation Gaps**: Lack of standardized configuration templates

### Stakeholders

| Stakeholder Group | Role | Interest |
|------------------|------|----------|
| **Platform Teams** | Primary Users | Streamlined Azure Landing Zone deployment setup |
| **DevOps Engineers** | End Users | Consistent infrastructure automation workflows |
| **Cloud Architects** | Reviewers | Standardized Azure Landing Zone implementations |
| **Security Teams** | Reviewers | Compliant configuration templates |

## Problem Statement

### Primary Problems

1. **Inconsistent Directory Structures**: Teams create different directory layouts, leading to confusion and maintenance challenges
2. **Configuration Template Gaps**: No standardized configuration file templates with appropriate defaults
3. **Manual Error-Prone Process**: High likelihood of human error in creating configuration files
4. **Time Investment**: Significant manual effort required for basic setup tasks

### Impact Assessment

- **Productivity Loss**: Teams spend 2-4 hours on manual setup per deployment
- **Quality Issues**: 30% of initial deployments fail due to configuration errors
- **Maintenance Overhead**: Inconsistent structures require custom maintenance procedures
- **Onboarding Friction**: New team members require extensive training on directory structures

## Solution Overview

### Proposed Solution

A PowerShell automation script (`Create-LzaAcceleratorDirStructure.ps1`) that:

1. Creates standardized directory structure for Azure Landing Zone Terraform deployments
2. Generates configuration files with appropriate default values
3. Provides comprehensive documentation and guidance
4. Includes error handling and validation capabilities

### Key Features

#### Core Functionality
- **Automated Directory Creation**: Creates `accelerator/config/` and `accelerator/output/` directories
- **Configuration File Generation**: Creates `inputs.yaml` and `platform-landing-zones.tfvars`
- **Template Population**: Populates files with comprehensive default configurations
- **Idempotent Execution**: Safe to run multiple times without overwriting existing content

#### User Experience Features
- **Interactive Feedback**: Color-coded console output showing progress
- **Path Customization**: Configurable base path parameter
- **Comprehensive Help**: Detailed PowerShell help documentation
- **Error Handling**: Graceful error handling with actionable error messages

## Requirements

### Functional Requirements

#### FR-001: Directory Structure Creation
**Priority**: Critical  
**Description**: The solution must create the following directory structure:
```
lza\tfm\ado\accelerator\
├── config\
│   ├── inputs.yaml
│   └── platform-landing-zones.tfvars
└── output\
```

**Acceptance Criteria**:
- All directories are created with appropriate permissions
- Directory creation is idempotent (safe to run multiple times)
- Custom base path can be specified via parameter

#### FR-002: Configuration File Generation
**Priority**: Critical  
**Description**: The solution must generate two configuration files with comprehensive default values.

**Acceptance Criteria**:
- `inputs.yaml` contains YAML-formatted Azure Landing Zone configuration
- `platform-landing-zones.tfvars` contains Terraform variable definitions
- Both files include placeholder values for customization
- Files include comprehensive comments and documentation

#### FR-003: Parameter Customization
**Priority**: High  
**Description**: The solution must support customizable parameters for different deployment scenarios.

**Acceptance Criteria**:
- BasePath parameter allows custom installation location
- Default behavior works without parameters
- Parameter validation prevents invalid configurations

#### FR-004: Error Handling
**Priority**: High  
**Description**: The solution must provide comprehensive error handling and user feedback.

**Acceptance Criteria**:
- Clear error messages for common failure scenarios
- Graceful handling of permission issues
- Informative success and progress messages

### Non-Functional Requirements

#### NFR-001: Performance
- Script execution time must be under 30 seconds
- Memory usage must remain under 100MB during execution
- Minimal disk I/O operations

#### NFR-002: Compatibility
- PowerShell 7.0+ compatibility required
- Windows, macOS, and Linux support
- Azure DevOps pipeline compatibility

#### NFR-003: Maintainability
- Modular script structure for easy updates
- Comprehensive inline documentation
- Version control friendly configuration files

#### NFR-004: Security
- No hardcoded credentials or sensitive information
- Secure file creation with appropriate permissions
- Input validation to prevent injection attacks

## Technical Specifications

### Architecture Overview

```mermaid
graph TD
    A[User Execution] --> B[Parameter Validation]
    B --> C[Directory Structure Creation]
    C --> D[Configuration File Generation]
    D --> E[File Content Population]
    E --> F[Success Feedback]
    
    G[Error Handler] --> H[Error Logging]
    G --> I[User Feedback]
    
    B -.-> G
    C -.-> G
    D -.-> G
    E -.-> G
```

### Core Components

#### 1. Script Engine
- **Language**: PowerShell 7+
- **Architecture**: Procedural with error handling
- **Dependencies**: .NET Core runtime

#### 2. Directory Management
- **Method**: PowerShell `New-Item` cmdlet
- **Permissions**: User-level directory creation
- **Validation**: `Test-Path` for existence checking

#### 3. File Generation
- **Format**: UTF-8 encoding for all files
- **Content**: Here-string templates with variable substitution
- **Validation**: File existence and write permission checking

### Configuration Templates

#### inputs.yaml Structure
```yaml
# Core Configuration
default_prefix: "alz"
default_postfix: ""
default_location: "eastus"

# Subscription Configuration
subscription_id_management: ""
subscription_id_identity: ""
subscription_id_connectivity: ""

# Networking Configuration
hub_virtual_networks:
  primary:
    name: "vnet-hub-primary"
    address_space: ["10.0.0.0/16"]
    subnets: [...]

# Management Configuration
log_analytics_workspace:
  name: "law-alz-management"
  retention_in_days: 30

# Policy Configuration
deploy_management_resources: true
configure_connectivity_resources: true
```

#### platform-landing-zones.tfvars Structure
```hcl
# Subscription Configuration
subscription_id_management    = ""
subscription_id_identity     = ""
subscription_id_connectivity = ""

# Management Group Configuration
root_parent_management_group_id = ""
default_prefix                  = "alz"

# Hub Networks Configuration
hub_networks = [{
  name                = "hub-eastus"
  resource_group_name = "rg-connectivity-eastus"
  location           = "eastus"
  address_space      = ["10.0.0.0/16"]
  subnets = [...]
}]

# Feature Toggles
enable_azure_firewall = true
enable_bastion = true
deploy_corp_landing_zones = true
```

## Implementation Details

### Script Structure

```powershell
#requires -version 7

[CmdletBinding()]
param(
    [Parameter(Mandatory = $false)]
    [string]$BasePath = $PWD
)

# Main execution flow:
# 1. Parameter validation
# 2. Directory path construction
# 3. Directory creation with existence checking
# 4. File content template definition
# 5. File creation with content population
# 6. Success feedback and next steps guidance
```

### Key Implementation Features

#### 1. Idempotent Execution
```powershell
if (-not (Test-Path -Path $acceleratorPath)) {
    New-Item -ItemType Directory -Path $acceleratorPath -Force
} else {
    Write-Host "Directory already exists: $acceleratorPath"
}
```

#### 2. Content Templates
- **Here-string formatting** for multi-line content
- **UTF-8 encoding** for international character support
- **Placeholder values** for user customization

#### 3. Error Handling
```powershell
try {
    # Directory and file operations
} catch {
    Write-Error "Failed to create directory structure: $($_.Exception.Message)"
    exit 1
}
```

#### 4. User Feedback
- **Color-coded output** for different message types
- **Progress indicators** showing current operation
- **Summary information** with next steps

### File Content Specifications

#### inputs.yaml Content Features
- **Comprehensive configuration** covering all major Azure Landing Zone components
- **Logical grouping** of related configuration sections
- **Default values** appropriate for most deployment scenarios
- **Comments** explaining each configuration section

#### platform-landing-zones.tfvars Content Features
- **Terraform-specific** variable definitions
- **HCL syntax** formatting
- **Complex object** definitions for networking and policies
- **Feature toggles** for optional components

## User Experience

### Usage Scenarios

#### Scenario 1: Default Execution
```powershell
.\Create-LzaAcceleratorDirStructure.ps1
```
**Expected Outcome**: Creates directory structure in current directory with default configuration files.

#### Scenario 2: Custom Base Path
```powershell
.\Create-LzaAcceleratorDirStructure.ps1 -BasePath "C:\Projects\ALZ"
```
**Expected Outcome**: Creates directory structure in specified path with configuration files.

#### Scenario 3: Re-execution
```powershell
.\Create-LzaAcceleratorDirStructure.ps1
```
**Expected Outcome**: Script detects existing directories/files and provides appropriate feedback without overwriting.

### User Journey

1. **Pre-execution**: User needs to set up Azure Landing Zone directory structure
2. **Execution**: User runs PowerShell script with optional parameters
3. **Feedback**: User receives real-time feedback on creation progress
4. **Completion**: User receives summary of created structure and next steps
5. **Customization**: User reviews and customizes generated configuration files
6. **Deployment**: User proceeds with Azure Landing Zone deployment

### Error Scenarios and Handling

| Error Scenario | User Experience | Resolution Guidance |
|----------------|-----------------|-------------------|
| **Permission Denied** | Clear error message with specific path | Run as administrator or change target directory |
| **Disk Space Insufficient** | Specific error about disk space | Free up disk space or choose different location |
| **Path Too Long** | Path length validation error | Use shorter base path or move closer to root |
| **PowerShell Version** | Version compatibility warning | Upgrade to PowerShell 7+ |

## Security Considerations

### Security Requirements

#### SEC-001: No Sensitive Data Storage
**Requirement**: Configuration files must not contain hardcoded sensitive information.
**Implementation**: All sensitive values use placeholder strings requiring user input.

#### SEC-002: File Permission Security
**Requirement**: Created files must have appropriate security permissions.
**Implementation**: Files inherit directory permissions from parent directory.

#### SEC-003: Input Validation
**Requirement**: All user inputs must be validated to prevent injection attacks.
**Implementation**: PowerShell parameter validation and path sanitization.

#### SEC-004: Credential Management
**Requirement**: No credentials should be embedded in configuration files.
**Implementation**: Configuration files use environment variables and Azure authentication.

### Security Best Practices

1. **Placeholder Values**: All sensitive configuration uses placeholder strings
2. **Environment Variables**: Encourage use of environment variables for secrets
3. **Azure Key Vault**: Reference Azure Key Vault for sensitive configuration
4. **Access Control**: Recommend proper RBAC configuration for deployed resources

## Testing and Validation

### Test Strategy

#### Unit Testing
- **Parameter Validation**: Test various parameter combinations
- **Directory Creation**: Verify directory structure creation
- **File Generation**: Validate file content and formatting
- **Error Handling**: Test error scenarios and recovery

#### Integration Testing
- **End-to-End**: Complete script execution in various environments
- **Platform Testing**: Windows, macOS, Linux compatibility
- **PowerShell Versions**: Compatibility across PowerShell versions

#### User Acceptance Testing
- **Scenario Testing**: Real-world usage scenarios
- **Documentation Validation**: Verify help documentation accuracy
- **Performance Testing**: Execution time and resource usage

### Test Cases

| Test Case ID | Description | Expected Result |
|--------------|-------------|-----------------|
| **TC-001** | Execute script without parameters | Creates structure in current directory |
| **TC-002** | Execute with custom BasePath | Creates structure in specified path |
| **TC-003** | Re-execute in existing directory | Detects existing files, provides feedback |
| **TC-004** | Execute with invalid path | Graceful error handling |
| **TC-005** | Execute without write permissions | Clear permission error message |
| **TC-006** | Validate YAML file format | Generated YAML is valid |
| **TC-007** | Validate Terraform file format | Generated HCL is valid |
| **TC-008** | Cross-platform execution | Works on Windows, macOS, Linux |

### Validation Criteria

#### Success Criteria
- All directories created successfully
- Configuration files generated with correct format
- No execution errors in standard scenarios
- User feedback is clear and actionable

#### Performance Criteria
- Script execution under 30 seconds
- Memory usage under 100MB
- Compatible with Azure DevOps pipeline execution

## Success Metrics

### Key Performance Indicators (KPIs)

#### Productivity Metrics
- **Setup Time Reduction**: From 2-4 hours to under 5 minutes (95% improvement)
- **Error Rate Reduction**: From 30% initial deployment failures to under 5%
- **Onboarding Time**: New team member productivity improvement by 80%

#### Quality Metrics
- **Configuration Consistency**: 100% standardized directory structures
- **Template Completeness**: 95% of required configuration parameters included
- **User Satisfaction**: Target user satisfaction score of 4.5/5

#### Adoption Metrics
- **Team Adoption Rate**: Target 90% adoption within 6 months
- **Script Execution Frequency**: Monitor usage patterns and frequency
- **Support Ticket Reduction**: 70% reduction in setup-related support requests

### Measurement Methods

1. **Time Tracking**: Before/after time measurements for setup processes
2. **Error Analytics**: Deployment success rate tracking
3. **User Surveys**: Regular feedback collection from platform teams
4. **Usage Analytics**: Script execution logs and frequency analysis

## Future Enhancements

### Phase 2 Enhancements

#### Enhanced Configuration Options
- **Multi-environment Support**: Templates for dev/test/prod environments
- **Industry-specific Templates**: Financial Services and Sovereign Cloud variants
- **Custom Policy Integration**: Support for organization-specific policies

#### Advanced Automation
- **CI/CD Integration**: Direct Azure DevOps pipeline integration
- **Validation Automation**: Built-in configuration validation
- **Deployment Triggers**: Automated deployment initiation

#### User Experience Improvements
- **Interactive Mode**: Guided configuration wizard
- **Configuration Profiles**: Saved configuration templates
- **Visual Feedback**: Enhanced progress indicators and reporting

### Phase 3 Enhancements

#### Enterprise Features
- **Multi-tenant Support**: Configuration for multiple Azure tenants
- **Compliance Scanning**: Built-in compliance validation
- **Governance Integration**: Policy and governance framework integration

#### Integration Capabilities
- **Third-party Tools**: Integration with popular DevOps tools
- **API Development**: REST API for programmatic access
- **Monitoring Integration**: Built-in monitoring and alerting setup

## Appendices

### Appendix A: Configuration File Examples

#### Complete inputs.yaml Example
```yaml
# Azure Landing Zone Accelerator Configuration
# This file contains the configuration parameters for deploying Azure Landing Zones

# Subscription and tenant information
default_prefix: "alz"
default_postfix: ""
subscription_id_management: "00000000-0000-0000-0000-000000000000"
subscription_id_identity: "11111111-1111-1111-1111-111111111111"
subscription_id_connectivity: "22222222-2222-2222-2222-222222222222"

# Primary location for resources
default_location: "eastus"

# Root management group configuration
root_parent_management_group_id: "33333333-3333-3333-3333-333333333333"

# Networking configuration
enable_ddos_protection: false
hub_virtual_networks:
  primary:
    name: "vnet-hub-primary"
    resource_group_name: "rg-connectivity-primary"
    location: "eastus"
    address_space: ["10.0.0.0/16"]
    subnets:
      - name: "AzureBastionSubnet"
        address_prefixes: ["10.0.1.0/24"]
      - name: "AzureFirewallSubnet"
        address_prefixes: ["10.0.2.0/24"]
      - name: "GatewaySubnet"
        address_prefixes: ["10.0.3.0/24"]
```

#### Complete platform-landing-zones.tfvars Example
```hcl
# Azure Landing Zone Platform Landing Zones Terraform Variables
subscription_id_management    = "00000000-0000-0000-0000-000000000000"
subscription_id_identity     = "11111111-1111-1111-1111-111111111111"
subscription_id_connectivity = "22222222-2222-2222-2222-222222222222"

root_parent_management_group_id = "33333333-3333-3333-3333-333333333333"
default_prefix                  = "alz"
default_postfix                = ""
default_location = "eastus"

deploy_management_resources    = true
configure_management_resources = true
configure_connectivity_resources = true

hub_networks = [
  {
    name                = "hub-eastus"
    resource_group_name = "rg-connectivity-eastus"
    location           = "eastus"
    address_space      = ["10.0.0.0/16"]
    
    subnets = [
      {
        name             = "AzureBastionSubnet"
        address_prefixes = ["10.0.1.0/24"]
      },
      {
        name             = "AzureFirewallSubnet"
        address_prefixes = ["10.0.2.0/24"]
      },
      {
        name             = "GatewaySubnet"
        address_prefixes = ["10.0.3.0/24"]
      }
    ]
  }
]
```

### Appendix B: Directory Structure Diagram

```
lza\tfm\ado\accelerator\
├── config\
│   ├── inputs.yaml                    # YAML configuration file
│   └── platform-landing-zones.tfvars # Terraform variables file
└── output\                           # Generated output directory
    ├── bootstrap\                    # Bootstrap deployment files
    ├── starter\                      # Starter module files
    └── tools\                        # Supporting tools and utilities
```

### Appendix C: PowerShell Help Documentation

```powershell
<#
.SYNOPSIS
    Creates the Azure Landing Zone Accelerator directory structure and required files.

.DESCRIPTION
    This script creates the necessary directory structure for the Azure Landing Zone Accelerator
    under lza\tfm\ado\accelerator with the following structure:
    - accelerator/
      - config/
        - inputs.yaml
        - platform-landing-zones.tfvars
      - output/

.PARAMETER BasePath
    The base path where the lza directory structure exists. Defaults to current directory.

.EXAMPLE
    .\Create-LzaAcceleratorDirStructure.ps1
    Creates the directory structure in the current directory

.EXAMPLE
    .\Create-LzaAcceleratorDirStructure.ps1 -BasePath "C:\MyProjects"
    Creates the directory structure in the specified base path

.NOTES
    Author: GitHub Copilot
    Version: 1.0
    This script creates the directory structure but does not execute any deployments.
#>
```

### Appendix D: Related Documentation

1. **Azure Landing Zones Documentation**: [https://docs.microsoft.com/azure/cloud-adoption-framework/ready/landing-zone/](https://docs.microsoft.com/azure/cloud-adoption-framework/ready/landing-zone/)
2. **Azure Landing Zones Terraform Accelerator**: [https://aka.ms/alz/accelerator/docs](https://aka.ms/alz/accelerator/docs)
3. **PowerShell Documentation**: [https://docs.microsoft.com/powershell/](https://docs.microsoft.com/powershell/)
4. **Terraform Azure Provider**: [https://registry.terraform.io/providers/hashicorp/azurerm/latest](https://registry.terraform.io/providers/hashicorp/azurerm/latest)

---

**Document Version**: 1.0  
**Last Updated**: 2024  
**Next Review Date**: Q2 2024  
**Document Owner**: Platform Engineering Team